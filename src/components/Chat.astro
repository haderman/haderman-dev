---
// src/components/Chat.astro
---

<section class="chat-container hidden special-bg">
  <div class="chat-header">
    <div class="chat-header-content">
      <h2>Assistant</h2>
      <button
        id="delete-history-button"
        class="icon-button"
        aria-label="Clear conversation"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path
            d="M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M10 11v6M14 11v6"
          ></path>
        </svg>
      </button>
    </div>
  </div>

  <div class="chat-messages" role="log" aria-live="polite">
    <!-- Messages will be displayed here -->
  </div>

  <div class="chat-input-container">
    <div class="chat-input-wrapper">
      <input
        type="text"
        id="chat-input"
        placeholder="Type your message..."
        aria-label="Type your message"
        class="special-bg"
      />
      <button id="send-button" class="send-button special-bg-gold">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="var(--primary-text)"
          stroke-width="2"
        >
          <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"></path>
        </svg>
      </button>
    </div>
  </div>
</section>

<style is:global>
  .chat-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 400px;
    max-height: 60vh;
    display: flex;
    flex-direction: column;
    z-index: 1000;
    font-family: "Mona Sans", system-ui;
    padding: var(--fluid-0);
    border: 1px solid transparent;
  }

  .chat-header {
    padding: var(--fluid-0);
    border-bottom: 1px solid oklch(0.25 0 0);
  }

  .chat-header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chat-header h2 {
    margin: 0;
    font-size: var(--fluid-1);
    font-weight: 600;
    color: var(--primary-text);
  }

  .icon-button {
    background: none;
    border: none;
    padding: var(--fluid--2);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .icon-button:hover {
    background-color: oklch(0.25 0 0);
  }

  .chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: var(--fluid-0);
    display: flex;
    flex-direction: column;
    gap: var(--fluid--2);
    background: radial-gradient(
      at center right,
      oklch(0.08 0 0),
      oklch(0.16 0 0)
    );
  }

  .message {
    max-width: 85%;
    padding: var(--fluid--2) var(--fluid-0);
    line-height: 1.5;
    font-size: var(--fluid-0);
    animation: messageAppear 0.25s ease-out;
    background: oklch(0.25 0 0);
    color: var(--primary-text);
  }

  .message.user {
    background: var(--accent-color);
    align-self: flex-end;
  }

  .message.bot {
    align-self: flex-start;
  }

  .chat-input-container {
    padding: var(--fluid-0) 0 0;
  }

  .chat-input-wrapper {
    display: flex;
    align-items: center;
    gap: var(--fluid--2);
    padding: var(--fluid--2);
    border: 1px solid transparent;
  }

  #chat-input {
    flex: 1;
    padding: var(--fluid--1);
    font-size: var(--fluid-0);
    color: var(--primary-text);
    outline: none;
    height: 100%;
  }

  .send-button {
    padding: var(--fluid--3);
    cursor: pointer;
    transition: all 0.2s ease;
    width: 24px;
    height: 24px;

    svg {
      width: 18px;
      height: 18px;
    }
  }

  @keyframes messageAppear {
    from {
      opacity: 0;
      transform: translateY(8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .loading-spinner {
    width: 24px;
    height: 24px;
    border: 3px solid oklch(0.25 0 0);
    border-top-color: var(--accent-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: var(--fluid--2) auto;
  }

  @media (max-width: 480px) {
    .chat-container {
      width: 100%;
      right: 0;
      bottom: 0;
      max-height: 100vh;
    }
  }
</style>

<script>
  const isDev = import.meta.env.DEV;
  import ollama from "ollama/browser";

  const chatContainer = document.querySelector(".chat-container");
  const chatInput = document.getElementById("chat-input") as HTMLInputElement;
  const sendButton = document.getElementById(
    "send-button"
  ) as HTMLButtonElement;
  const chatHistory = document.querySelector(".chat-messages");
  const deleteHistoryButton = document.getElementById("delete-history-button");
  const AVAILABLE_CHAT_MODELS = [
    "deepseek-r1:1.5b",
    "deepseek-r1:8b",
    "deepseek-r1:14b",
  ];

  async function initializeChat() {
    try {
      const isAvailable = await checkIfChatIsAvailable();
      if (isAvailable) {
        loadChatHistory();
        chatContainer.classList.remove("hidden");
        setupEventListeners();
        scrollToBottom();
      }
    } catch (error) {
      console.error("Chat initialization failed:", error);
    }
  }

  function setupEventListeners() {
    sendButton.addEventListener("click", sendMessage);
    chatInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
    deleteHistoryButton.addEventListener("click", clearChatHistory);
  }

  async function checkIfChatIsAvailable() {
    if (!isDev) return false;
    try {
      const list = await ollama.list();
      return AVAILABLE_CHAT_MODELS.some((model) =>
        list.models.some((m) => m.name === model)
      );
    } catch (error) {
      console.error("Model check failed:", error);
      return false;
    }
  }

  function createMessageElement(role, content) {
    const messageElement = document.createElement("div");
    messageElement.className = `message ${role}`;
    messageElement.textContent = content;
    return messageElement;
  }

  async function sendMessage() {
    const messageContent = chatInput.value.trim();
    if (!messageContent) return;

    chatInput.disabled = true;
    sendButton.disabled = true;

    try {
      const userMessage = createMessageElement("user", messageContent);
      chatHistory.appendChild(userMessage);
      saveToLocalStorage({ role: "user", content: messageContent });
      scrollToBottom();

      const loadingIndicator = document.createElement("div");
      loadingIndicator.className = "loading-spinner";
      chatHistory.appendChild(loadingIndicator);
      scrollToBottom();

      const response = await ollama.chat({
        model: "deepseek-r1:1.5b",
        messages: [{ role: "user", content: messageContent }],
        stream: true,
      });

      chatHistory.removeChild(loadingIndicator);
      const botMessage = createMessageElement("bot", "");
      chatHistory.appendChild(botMessage);

      let fullResponse = "";
      for await (const part of response) {
        fullResponse += part.message.content.replace(/<think>|<\/think>/g, "");
        botMessage.textContent = fullResponse;
        scrollToBottom();
      }

      saveToLocalStorage({ role: "bot", content: fullResponse });
    } catch (error) {
      console.error("Chat error:", error);
      const errorMessage = createMessageElement(
        "bot",
        "Sorry, something went wrong. Please try again."
      );
      chatHistory.appendChild(errorMessage);
    } finally {
      chatInput.value = "";
      chatInput.disabled = false;
      sendButton.disabled = false;
      chatInput.focus();
    }
  }

  function scrollToBottom() {
    requestAnimationFrame(() => {
      chatHistory.scrollTop = chatHistory.scrollHeight;
    });
  }

  function saveToLocalStorage(message) {
    const history = JSON.parse(localStorage.getItem("chatHistory") || "[]");
    history.push(message);
    localStorage.setItem("chatHistory", JSON.stringify(history));
  }

  function loadChatHistory() {
    const history = JSON.parse(localStorage.getItem("chatHistory") || "[]");
    history.forEach((msg) => {
      const element = createMessageElement(msg.role, msg.content);
      chatHistory.appendChild(element);
    });
    scrollToBottom();
  }

  function clearChatHistory() {
    localStorage.removeItem("chatHistory");
    chatHistory.innerHTML = "";
    const confirmation = createMessageElement("bot", "Chat history cleared");
    chatHistory.appendChild(confirmation);
    scrollToBottom();
  }

  initializeChat();
</script>
