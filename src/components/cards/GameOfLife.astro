---
// No imports needed for this basic implementation

const totalRows = 15;
const totalCols = 30;
---

<article data-area="game-of-life" class="card">
  <div
    id="game-grid"
    class="game-grid"
    data-total-rows={totalRows}
    data-total-cols={totalCols}
  >
    <!-- Grid cells will be dynamically generated here -->
  </div>
  <div class="controls">
    <button id="start-button" data-action="start">Start</button>
    <button id="stop-button" data-action="stop">Stop</button>
    <button id="reset-button" data-action="reset">Reset</button>
    <button id="reset-empty-button" data-action="reset-empty"
      >Reset Empty</button
    >
  </div>
</article>

<style is:global define:vars={{ totalRows, totalCols }}>
  .card[data-area="game-of-life"] {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--fluid-1);
    background:
      radial-gradient(at center right, oklch(0.08 0 0), oklch(0.16 0 0))
        padding-box,
      linear-gradient(230deg, oklch(0.2 0 0), oklch(0.25 0 0)) border-box;
    border: 1px solid transparent;
    padding: 0;
  }

  .game-grid {
    display: grid;
    grid-template-columns: repeat(var(--totalCols), 20px);
    grid-template-rows: repeat(var(--totalRows), 20px);
    gap: 1px;
    background-color: oklab(0.17 0 0);
  }

  .game-grid div {
    width: 20px;
    height: 20px;
    background-color: black;
  }

  .controls {
    display: flex;
    justify-content: center;
    gap: var(--fluid-1);
    margin-top: var(--fluid-1);
    margin-bottom: var(--fluid-1);
    align-items: center;
    width: 100%;
    max-width: 400px;
    padding: var(--fluid-0);

    & > button {
      border: 1px solid oklab(1 0 0 / 0.45);
      background-color: unset;

      &:hover {
        background-color: oklab(1 0 0 / 0.15);
        color: var(--primary-text);
      }
    }
  }
</style>

<script>
  import { logger } from "@/lib/logger";

  let isGameRunning = false;
  let isEditing = false;
  let isMouseDown = false; // Track mouse button state

  const gridElement = document.getElementById("game-grid");
  const totalRows = parseInt(gridElement.dataset.totalRows, 10);
  const totalCols = parseInt(gridElement.dataset.totalCols, 10);

  const rows = totalRows;
  const cols = totalCols;

  let grid = createGrid();

  // Create a new Web Worker
  const worker = new Worker("/game-of-life-worker.js");

  // Listen for messages from the worker
  worker.onmessage = function (event) {
    grid = event.data;
    drawGrid();
  };

  function createGrid() {
    return new Array(rows).fill(null).map(() => new Array(cols).fill(false));
  }

  function drawGrid() {
    gridElement.innerHTML = "";
    for (let row = 0; row < rows; row++) {
      for (let col = 0; col < cols; col++) {
        const cell = document.createElement("div");
        if (grid[row][col]) {
          cell.className = "special-bg-gold";
        }
        const aliveNeighbors = countAliveNeighbors(row, col);
        if (aliveNeighbors === 1 && Math.random() < 0.8) {
          cell.className = "special-bg-gold special-bg-gold-light";
        }
        cell.dataset.row = row.toString();
        cell.dataset.col = col.toString();
        gridElement.appendChild(cell);
      }
    }

    gridElement.addEventListener("mousedown", handleMouseDown);
    gridElement.addEventListener("mousemove", handleMouseMove);
    gridElement.addEventListener("mouseup", handleMouseUp);
    document.addEventListener("mouseup", handleMouseUp); // Ensure mouseup is detected outside the grid
  }

  function handleMouseDown(event) {
    event.preventDefault();
    event.stopPropagation();

    isMouseDown = true;
    if (event.target.dataset.row !== undefined) {
      startEditing(event);
    }
  }

  function handleMouseMove(event) {
    event.preventDefault();
    event.stopPropagation();

    if (isMouseDown && event.target.dataset.row !== undefined) {
      editCell(event);
    }
  }

  function handleMouseUp(event) {
    event.preventDefault();
    event.stopPropagation();

    isMouseDown = false;
    if (event.target.dataset.row !== undefined) {
      stopEditing(event);
    }
  }

  function startEditing(event) {
    event.preventDefault();
    event.stopPropagation();

    isEditing = true;
    isGameRunning = false;
    worker.postMessage("stop");
    toggleCellState(event);

    logger({ type: "info[Game of Life]", message: "Start editing" });
  }

  function editCell(event) {
    if (isEditing) {
      toggleCellState(event);
    }
  }

  function stopEditing(event) {
    event.preventDefault();
    event.stopPropagation();

    isEditing = false;
    // if (!isGameRunning) {
    //   worker.postMessage({ type: "start", grid });
    // }

    logger({ type: "info[Game of Life]", message: "Stop editing" });
  }

  function toggleCellState(event) {
    const target = event.target;
    const row = parseInt(target.dataset.row, 10);
    const col = parseInt(target.dataset.col, 10);

    if (!isNaN(row) && !isNaN(col)) {
      grid[row][col] = true;
      target.className = "special-bg-gold";
      worker.postMessage({ type: "update", grid });
    }
  }

  function countAliveNeighbors(row, col) {
    let count = 0;
    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        if (i === 0 && j === 0) continue;
        const newRow = row + i;
        const newCol = col + j;
        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {
          count += grid[newRow][newCol] ? 1 : 0;
        }
      }
    }
    return count;
  }

  // Event listeners for buttons

  document.getElementById("start-button").addEventListener("click", (event) => {
    event.preventDefault();
    event.stopPropagation();

    worker.postMessage({ type: "start", grid, rows, cols });
    logger({ type: "info[Game of Life]", message: "Start game" });
  });

  document.getElementById("stop-button").addEventListener("click", (event) => {
    event.preventDefault();
    event.stopPropagation();

    worker.postMessage("stop");
    logger({ type: "info[Game of Life]", message: "Stop game" });
  });

  document.getElementById("reset-button").addEventListener("click", (event) => {
    event.preventDefault();
    event.stopPropagation();

    worker.postMessage("stop");
    grid = createGrid();
    setHPattern();
    worker.postMessage({ type: "reset", grid });
    drawGrid();
    logger({ type: "info[Game of Life]", message: "Reset grid" });
  });

  document
    .getElementById("reset-empty-button")
    .addEventListener("click", (event) => {
      event.preventDefault();
      event.stopPropagation();

      worker.postMessage("stop");
      grid = createGrid();
      worker.postMessage({ type: "reset", grid });
      drawGrid();
      logger({ type: "info[Game of Life]", message: "Reset empty grid" });
    });

  // Initialize the grid and draw it
  setHPattern();
  drawGrid();

  function randomizeGrid() {
    for (let row = 0; row < rows; row++) {
      for (let col = 0; col < cols; col++) {
        grid[row][col] = Math.random() < 0.005;
      }
    }
  }

  function setHPattern() {
    const centerRow = Math.floor(rows / 2);
    const centerCol = Math.floor(cols / 2);

    // Clear the grid first
    grid = createGrid();

    // Set the "H" pattern
    // Left vertical bar
    grid[centerRow - 2][centerCol - 1] = true;
    grid[centerRow - 1][centerCol - 1] = true;
    grid[centerRow][centerCol - 1] = true;
    grid[centerRow + 1][centerCol - 1] = true;
    grid[centerRow + 2][centerCol - 1] = true;

    // Right vertical bar
    grid[centerRow - 2][centerCol + 1] = true;
    grid[centerRow - 1][centerCol + 1] = true;
    grid[centerRow][centerCol + 1] = true;
    grid[centerRow + 1][centerCol + 1] = true;
    grid[centerRow + 2][centerCol + 1] = true;

    // Middle horizontal bar
    grid[centerRow][centerCol - 1] = true;
    grid[centerRow][centerCol] = true;
    grid[centerRow][centerCol + 1] = true;
    grid[centerRow][centerCol + 2] = true;
  }
</script>
